History
--------
Version 37 - ?? / ???? - mu: , sigma: - January 3, 2017
* Partially Revert not expanding when production > 10%. Seems to cause pathing issues.

Version 36 - 6 / 1268 - mu: 50.57, sigma: 0.77 - January 3, 2017
* Don't try to expand when production is > 10% more than the next highest enemy. Instead, use the strength to attack.
* Added code to try to expand towards the global maximum

Version 35 - 5 / 1268 - mu: 51.84, sigma: 0.72 - January 3, 2017
* Penalize capturing cells too far away. I expect this actually perform worse, but let's try it out.

Version 34 - 6 / 1263 - mu: 51.24, sigma: 0.74 - January 3, 2017
* Oops, i forgot to make sure I didn't break anything

Version 33 - 1229 / 1263 - mu: 7.86, sigma: 1.78 - January 3, 2017
* Try to fix a timeout error occuring on the largest of maps.

Version 32 - 16 / 1263 - mu: 49.6, sigma: 1.2 - January 3, 2017
* Tweaked combat logic to take controlled/enemy production squares into consideration (How much does this actually affect the bot?)
* Allow the bot to break through to create additional attack lanes if it thinks it's strong enough

Version 31 - 5 / 1263 - mu: 51.59 , sigma: 0.70 - January 3, 2017
* Alter buildup parameters to vary based on distance from border & production size
* Tweak the production evaluation heuristic & moved to separate function
* Allow breaking through enemy borders if strength is overloaded
* Slightly more selective in which border cells to attack

Version 30 - 6 / 1260 - mu: 50.45, sigma: 0.68 - January 1, 2017
* Moved most parameters to a function to allow changing (some do!) based on game state.
* Tweaked some parameters for the above.
* Rewrote collision code. Much simplier. added a last check function to catch some that weren't working

Version 29 - 6 / 1251 - mu: 51.71, sigma: 0.68 - December 31, 2016
* Removed all distance maps. They took too long to calculate. Do a back end check later to make sure i didn't break anything.
* Hit a peak of 3! (2 but that's cheating since nmalaguti reuploaded)

Version 28 - 17 / 1242 - mu: 48.55, sigma: 0.95 - December 31, 2016
* Trying to reduce timeout errors on large maps. Main culprits are distance and recover maps.

Version 27 - 31 / 1242 - mu: 46.33, sigma: 0.82 - December 30, 2016
* Prioritize attacking to attempt to maximize overkill damage.
* Fix pathing to border cells
* Choose production cells to attack smartly.
* Delay movement of early game cells if it's not productive
* Have border squares move first
* Try to fix strength collisions, but not completely.
* Added a zero-strength move check

Version 26 - 14 / 1242 - mu: 48.73, sigma: 0.68 - December 29, 2016
* Completely rewrote the bot again.
* Note, first diamond bot! Rank 14

Version 25 - 42 / 1203 - mu: 45.46 , sigma: 0.68  - December 24, 2016
* I should test my bot before submitting. Fixed some bugs from the prior version.

Version 24 - 1136 / 1164 - mu: 10.05, sigma: 1.3 - December 24, 2016
* Removed some calcs from dij calc. Let's see if this stops the timeout issues.

Version 23 - 25 / 1164 - mu: 47.45, sigma: 0.73 - December 24, 2016
* This is getting stupid. Removed is_owner_map, changed some recover_map_smooth stuff. I hope nothing breaks. I supposedly fixed a broken as well.

Version 22 - 149 / 1162 - mu: 41.91, sigma: 1.2 - December 24, 2016
* Tweak some more things. Is it the init Dijkstra's that's causing the problems??

Version 21 - 100 / 1162 - mu: 43.86, sigma: 1.11 - December 24, 2016
* Reduce recover map to 9 and remove recover_map_enemy_smooth to try to alleviate timeout errors

Version 20 - 302 / 1162 - mu: 38.56, sigma: 1.5 - December 24, 2016
* Fix time-out errors from updating distance_maps that are not currently being used. Need to fix this if we want to use them in the future.

Version 19 - 197 / 1162 - mu: 39.57, sigma: 0.86 December 23, 2016
* Incorporate Dijkstra's Algorithm for pathfinding
* A lot more opportunities to take advantage of this going forward.

Version 18 - 23 / 1162 - mu: 47.38, sigma: 0.73 - December 23, 2016
* Minor tweaks to parameters which seem to perform slightly better in testing

Version 17 - 21 / 1161 - December 22, 2016
* Reduce recover_map range to 15. 50 was a bit excessive and resulting in timeouts.

Version 16 - 166 / 1155 - December 22, 2016
* Use recover_map instead of future_value_map
* Try to optimize attack patterns by having squares depending on parity
* Try to avoid taking cells that won't pay itself off (still need to fix for late game)
* Some hacky logic to have border cells move to more valuable border cells if they aren't valuable enough to capture

Version 15 - 20 / 1155 - December 20, 2016
* Tried many many major tweaks but nothing works.
* Rewrote the move_to_target function which seems to perform much better
* Minor code clean up
* Rewrote the find nearest border function

Version 14 - 30 / 1137 - December 12, 2016
* Change how far our the early game tries to look based on map size and player count
* Slightly tweak the find_nearest_non_npc_enemy_direction function. There is some slowdown when we're winning but we don't want to timeout. How to fix?

Version 13 - 43 / 983 - December 11, 2016
* Rewrote early game recursion code. Now runs in constant time!
* Some minor parameter tweaking.
* Wrote, but not using, a new heuristic map

Version 12 - 23 / 974 - December 10, 2016
* Timeout error fix attempt 2, bugfix in move_to_target

Version 11 - 663 / 955 - December 10, 2016
* Timeout error fix attempt

Version 10.0 - 611 / 955 - December 10, 2016
* Added separate parameters for late game, along with initial values
* Rewrote the move_to_target code significantly.
* Tweaked earlygame to midgame trigger

Version 9.0 - 78 / 955 - December 9, 2016
* Added a separate early game heuristic
* Changed the overstrength code to occur when attempting to move to a target. 
* Attempts to chain when using the move_to_target overstrength code.
* Tweaks to parameters. This will take a lot more future work to enhance.

Version 8.0 - 93 / 939 - December 7, 2016
* Fix a timeout bug, hopefully... Spread was taking up too much time so limit how far we go

Version 7.0 - 143 / 906 - December 7, 2016
* MAJOR CODE REWRITE!
* Complete code refactoring. 
  Square is a class that contains information on a square. 
  GameMap contains all functions related to the game
* Utilize numpy for a lot of information storage. Adopt some clever tricks from Declan.
* Complete overhaul of the AI Engine. Older version had each cell evaluate what the best move was and then have it greedily perform the move. A coordinator then tries to prevent pieces from clashing.
  Now, instead of each square acting independently, a strategy AI looks at all available squares to capture, then tries to see what squares are available to capture that square. Once that is complete, then the individual square AI is allowed to make whatever move it deems best.
  Right now, there is still a check at the end to consider whether or not there is going to be strength clashing. A future enhancement is to have the square decide if it should move into it then try to find an alternative path?
* A lot of the heuristic functions can now be tweaked utilizing parameters. Adjusting these is a todo as right now they are selected completely judgementally and hopefully enough to beat the prior version's code.

Version 6.0 - 62 / 853 - December 3, 2016
* Applied heuristic function to attacking by using multiple pieces

Version 5.0 - 65 / 853 - December 3, 2016
* heuristic function changes:
  Tries not to overvalue expanding into cells bordering enemy territory too much.
  Don't try to capture territory which is already being taken over.
  
Version 4.0 - 73 / 848 - December 3, 2016
* move_to_target: old implementation might move into uncontrolled territory. Not good. 
  New implementation moves only though adjacent owned territory, if possible. If multiple routes exist, then it takes the direction with the lowest production.
* consolidate_strength: Split into two subroutines. One which is the old multi-attacker into a cell, the other looks outwards to gather strength to attack a cell.

Version 3.0 - 74 / 848 - December 3, 2016
* Failed compilation - skip version

Version 2.0 - 74 / 848 - December 2, 2016
* Moved hlt file to single file. 
* consolidate_strength: Completely rewritten. Searches all border tiles and then sees if we can consolidate. Ranked by production strength, then sees if we can consolidate.
* find_nearest_enemy_direction: Calculate ALL distances, and pick the shortest with lowest production if there is a tie. Otherwise, pick randomly.
* heuristic: look at not just the cell but adjacent cells to determine the value of capturing the cell.
* smallest strength cells move first. 

Version 1.0 - 136 / 828 - December 1, 2016
* First attempt at something that's better than the basic tutorial bots